#!/usr/bin/env bash

set -euo pipefail

die () {
    printf '%s\n' "$1" >&2
    exit 1
}

MAJOR_BASH_VERSION=$(echo $BASH_VERSION | cut -d '.' -f 1)
if [[ $MAJOR_BASH_VERSION < 4 ]]
then
  die "You must use a Bash shell that is >= version 4 (you're on $BASH_VERSION)"
fi

# default vars
readonly _TMUXER_SUBST_STRING="{}"
readonly _TMUXER_DEFAULT_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/tmuxer"
declare -A _TMUXER_VALID_LAYOUT_ARR=( ['tiled']=1 ['even-horizontal']=1 ['even-vertical']=1 ['main-horizontal']=1 ['main-vertical']=1 )
# utility vars
readonly _TMUXER_TMUX_RUNNING=$(tmux info &> /dev/null && echo $?)
declare -a _TMUXER_REQUIRED_COMMANDS=( 'cat' 'head' 'realpath' 'sed' 'sort' 'ssh' 'tmux' )
# config vars
TMUXER_SESSION=
TMUXER_WINDOW_NUMBER=0
TMUXER_WINDOW_NAME=''
TMUXER_COMMAND="echo ${_TMUXER_SUBST_STRING}"
TMUXER_CONFIG_FILE=
TMUXER_LAYOUT='tiled'
TMUXER_NEW_SESSION=0
TMUXER_DISABLE_SYNC=0
TMUXER_DUMP_CONFIG=0


print_help () {
    cat <<USAGE_EOF
Usage:
    -h, --help              Show help
    -c, --command           Set command to be executed in each pane (default: \`echo {}\`). The command should contain \`{}\` where you
                            intend to substitute the pane's target argument. Multiple substituions can be made per pane.
                                For example: \`dig {} +short\`
    -d, --dump              Write out a tmuxer config file to stdout based on the provided command line arguments
    -f, --file [<file>]     Config file to read from. The following paths are checked for the specified file:
                                Absolute path, relative path to current directory, and \`\$XDG_CONFIG_HOME/tmuxer\`
    -l, --layout [<layout>] Tmux layout to use
                                Valid options: \`tiled\`, \`even-horizontal\`, \`even-vertical\`, \`main-horizontal\`, \`main-vertical\`
                                Default: \`tiled\`
    -n, --new-session       Create new tmux session (default only if attached session not detected)
    -s, --ssh               "SSH Mode". Changes command to \`ssh {}\` (Same as: \`--command 'ssh {}'\`)
    -u, --unsync            Disable synchronization of panes (default: pane input is synchronized)
    -w, --window-name       What to name the tmux window created to hold panes
USAGE_EOF
}

# get flags
while (( "$#" > 0 )); do
    case "$1" in
        -h | -\? | --help)
            print_help
            exit
            ;;
        -c | --command)
            if [[ "$2" ]]; then
                TMUXER_COMMAND=${2}
                shift
            else
                die 'Flag "--command" requires argument'
            fi
            ;;
        -d | --dump)
            TMUXER_DUMP_CONFIG=1
            ;;
        -f | --file)
            if [[ "$2" ]]; then
                TMUXER_CONFIG_FILE=${2}
                shift
            else
                die 'Flag "--file" requires argument'
            fi
            ;;
        -l | --layout)
            if [[ "$2" ]]; then
                TMUXER_LAYOUT=${2}
                shift
            else
                die 'Flag "--layout" requires argument'
            fi
            ;;
        -n | --new-session)
            TMUXER_NEW_SESSION=1
            ;;
        -s | --ssh)
            TMUXER_COMMAND="ssh {}"
            ;;
        -u | --unsync)
            TMUXER_DISABLE_SYNC=1
            ;;
        -w | --window-name)
            if [[ "$2" ]]; then
            TMUXER_WINDOW_NAME=${2}
                shift
            else
                die 'Flag "--window-name" requires argument'
            fi
            ;;
        --) # end of options
            shift
            break
            ;;
        -?*)
            printf 'unknown option "%s" ignored\n' "$1" >&2
            ;;
        *) # default case: no more options, break loop
            break
    esac

    shift
done

# check that required packages are available
for pkg in "${_TMUXER_REQUIRED_COMMANDS[@]}"; do
    if [[ ! $(command -v "$pkg") ]]; then
        die "Command \`$pkg\` is required and could not be found, please ensure it's installed and in \$PATH"
    fi
done

# check that layout is valid
if [[ ! -v _TMUXER_VALID_LAYOUT_ARR["$TMUXER_LAYOUT"] ]]; then
    die 'Layout provided is not a valid Tmux layout: "$TMUXER_LAYOUT"'
fi

# check if we're running from config file or command line
if [[ ! -z "$TMUXER_CONFIG_FILE" ]]; then
    # check if absolute path
    if [[ -f "$(realpath $TMUXER_CONFIG_FILE)" ]]; then
        source "$(realpath $TMUXER_CONFIG_FILE)"
    # check if path relative to current working dir
    elif [[ -f "$(realpath $(pwd)/$TMUXER_CONFIG_FILE)" ]]; then
        source "$(realpath $(pwd)/$TMUXER_CONFIG_FILE)"
    # check if path relative to XDG_CONFIG_HOME based default directory
    elif [[ -f "$(realpath ${_TMUXER_DEFAULT_CONFIG_DIR/%\//}/$TMUXER_CONFIG_FILE)" ]]; then
        source "$(realpath ${_TMUXER_DEFAULT_CONFIG_DIR/%\//}/$TMUXER_CONFIG_FILE)"
    else
        die 'Could not find config file: "$TMUXER_CONFIG_FILE"'
    fi
else
    # running from command line, check if input is interactive shell or pipe
    if [[ -t 0 ]]; then 
        # we have a TTY, grab remaining command line args
        TMUXER_PANES=("$@")
    else
        while read -r line; do
            TMUXER_PANES+=("${line}")
        done < <(cat | sed '/^$/d')
    fi
fi

# if dump flag is passed, write tmuxer config vars to stdout
# useful for saving one-liners to tmuxer config files for future re-use
if [[ ${TMUXER_DUMP_CONFIG} == 1 ]]; then
    cat<<DUMP_CONFIG_EOF
TMUXER_WINDOW_NAME="${TMUXER_WINDOW_NAME:-}"
TMUXER_LAYOUT="${TMUXER_LAYOUT}"
TMUXER_DISABLE_SYNC=${TMUXER_DISABLE_SYNC}
TMUXER_NEW_SESSION=${TMUXER_NEW_SESSION}
TMUXER_COMMAND="${TMUXER_COMMAND}"
TMUXER_PANES=(
    $(for pane in "${TMUXER_PANES[@]}"; do
    echo -e "\t$pane"
    done)
)
DUMP_CONFIG_EOF

exit
fi

# check if already running in tmux
if [[ ${_TMUXER_TMUX_RUNNING} == 0 && -n "${TMUX+set}" ]]; then
    # check if new session was requested
    if [[ "$TMUXER_NEW_SESSION" == 1 ]]; then
        TMUXER_SESSION="TMUXER-$$"
        tmux new-session -d -s "${TMUXER_SESSION}"
    else
        # create new window in our session to hold our panes
        TMUXER_SESSION="$(tmux display-message -p '#{session_name}')"
        TMUXER_WINDOW_NUMBER=$(( $(tmux list-windows -t "${TMUXER_SESSION}" -F '#{window_index}' | sort -rn | head -n1) + 1 ))
        tmux new-window -t "${TMUXER_SESSION}:${TMUXER_WINDOW_NUMBER}" -n "TMUXER-$$"
    fi
else
    # tmux not running, need new session anyway
    TMUXER_NEW_SESSION=1
    TMUXER_SESSION="TMUXER-$$"
    tmux new-session -d -s "${TMUXER_SESSION}"
fi

# enable pane border status for easier tracking of panes
tmux set-option -t "${TMUXER_SESSION}:${TMUXER_WINDOW_NUMBER}" pane-border-status top
tmux set-option -t "${TMUXER_SESSION}:${TMUXER_WINDOW_NUMBER}" pane-border-format '#{?pane_synchronized,[sync],} ###{pane_index} #{pane_title}'

for pane in "${TMUXER_PANES[@]}"; do
    # split window to make pane
    tmux split-window -t "${TMUXER_SESSION}:${TMUXER_WINDOW_NUMBER}"

    # clear the pane's buffer
    tmux send-keys -t "${TMUXER_SESSION}:${TMUXER_WINDOW_NUMBER}" -R \; send-keys -t "${TMUXER_SESSION}:${TMUXER_WINDOW_NUMBER}" C-l \; clear-history

    # assemble command to send to pane
    tmux send-keys -t "${TMUXER_SESSION}:${TMUXER_WINDOW_NUMBER}" -- "${TMUXER_COMMAND//${_TMUXER_SUBST_STRING}/$pane}" C-m

    # adjust layout after every pane created so tmux doesn't get upset about pane size
    tmux select-layout -t "${TMUXER_SESSION}:${TMUXER_WINDOW_NUMBER}" "${TMUXER_LAYOUT}"
done

# as long as user didn't request input sync to be disabled, enable it
if [[ "$TMUXER_DISABLE_SYNC" == 0 ]]; then
    tmux set-option -w -t "${TMUXER_SESSION}:${TMUXER_WINDOW_NUMBER}" synchronize-panes on
fi

# kill off empty 1st pane
tmux kill-pane -t "${TMUXER_SESSION}:${TMUXER_WINDOW_NUMBER}.0"

# final layout adjustment
tmux select-layout -t "${TMUXER_SESSION}:${TMUXER_WINDOW_NUMBER}" "${TMUXER_LAYOUT}"

# move back to first pane for handing off to user
tmux select-pane -t "${TMUXER_SESSION}:${TMUXER_WINDOW_NUMBER}.0"

# if window name provided, set it
if [[ ! -z "$TMUXER_WINDOW_NAME" ]]; then
    tmux rename-window -t "${TMUXER_SESSION}:${TMUXER_WINDOW_NUMBER}" "$TMUXER_WINDOW_NAME"
fi

if [[ "$TMUXER_NEW_SESSION" == 1 ]]; then
    if [[ ${_TMUXER_TMUX_RUNNING} == 0 && -n "${TMUX+set}" ]]; then
        # if tmux is already running and a session is attached, then switch to the new session
        echo "* Switching to new \`tmuxer\` session '${TMUXER_SESSION}'..."
        tmux switch-client -t "${TMUXER_SESSION}"
    elif [[ ! -t 0 ]]; then
        # if stdin is pipe and not TTY, then we can't directly attach to the new session
        echo "* New \`tmuxer\` session created, but couldn't attach automatically because input was not from a TTY."
        echo "* You can attach like so:"
        echo "tmux attach -t ${TMUXER_SESSION}"
    else
        tmux attach -t "${TMUXER_SESSION}"
    fi
fi
